#!/usr/bin/env python
from __future__ import print_function

import argparse
import math
import os
import shutil
import subprocess
import sys
import tempfile
import uuid


NODE_BASENAME = 'swarm-'
SLOT_SIZE = 0.25


def gen_node_names(nodect):
    names = []
    for i in range(0, nodect):
        names.append('{base}{unique}'.format(
            base=NODE_BASENAME,
            unique=uuid.uuid4().hex))
    return names


def create_inventory(node_names):
    if not os.path.exists('inventory'):
        shutil.copy('inventory.head', 'inventory')
    inventory = tempfile.NamedTemporaryFile(prefix='inventory.scale_spawn', dir=os.getcwd())
    with open('inventory.spawn') as head:
        inventory.write(head.read())
    for name in node_names:
        inventory.write(name)
        inventory.write('\n')
    inventory.flush()
    return inventory


def get_env():
    env = os.environ.copy()
    env['PATH'] = '{venv_bin}:{path}'.format(
        venv_bin=os.path.abspath('../../bin'),
        path=os.environ['PATH']
    )
    return env


def run_playbook(playbook, inventory, args=None):
    if not args:
        args = []
    cmd = ['ansible-playbook', '-i', inventory, playbook] + args
    print('Running %s' % ' '.join(cmd), file=sys.stderr)
    subprocess.check_call(cmd, stdout=sys.stderr, env=get_env())


def spawn(slots):
    nodes_needed = int(math.ceil(slots * SLOT_SIZE))
    print('Need %s nodes' % nodes_needed, file=sys.stderr)
    node_names = gen_node_names(nodes_needed)
    inventory = create_inventory(node_names)
    run_playbook('spawn.yml', inventory.name)
    inventory.close()
    print(' '.join(node_names))


def destroy(nodes):
    limit_arg = ':'.join(nodes)
    run_playbook('delete.yml', 'inventory', args=['--limit', limit_arg])
    print(' '.join(nodes))


def get_args():
    parser = argparse.ArgumentParser(description='Spawn or Destroy swarm nodes')
    parser.add_argument('--slots', type=int, default=0, help='Number of slots needed')
    parser.add_argument('--destroy', action='store_true', default=False, help='Destroy nodes')
    parser.add_argument('nodes', metavar='NODE', nargs='*', help='Nodes to destroy')
    args = parser.parse_args()
    return args


def handle_args():
    args = get_args()
    if args.slots:
        spawn(args.slots)
    elif args.nodes and args.destroy:
        destroy(args.nodes)
    else:
        print('nothing to do')


if __name__ == '__main__':
    os.chdir(os.path.abspath(os.path.dirname(__file__)))
    handle_args()
